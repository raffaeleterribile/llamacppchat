<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFrameworks>net8.0-maccatalyst</TargetFrameworks>
		<!-- Uncomment to also build the tizen app. You will need to install tizen by following this: https://github.com/Samsung/Tizen.NET -->
		<!-- <TargetFrameworks>$(TargetFrameworks);net8.0-tizen</TargetFrameworks> -->

		<!-- Note for MacCatalyst:
		The default runtime is maccatalyst-x64, except in Release config, in which case the default is maccatalyst-x64;maccatalyst-arm64.
		When specifying both architectures, use the plural <RuntimeIdentifiers> instead of the singular <RuntimeIdentifier>.
		The Mac App Store will NOT accept apps with ONLY maccatalyst-arm64 indicated;
		either BOTH runtimes must be indicated or ONLY macatalyst-x64. -->
		<!-- For example: <RuntimeIdentifiers>maccatalyst-x64;maccatalyst-arm64</RuntimeIdentifiers> -->

		<OutputType>Exe</OutputType>
		<RootNamespace>LlamaCppCS</RootNamespace>
		<UseMaui>true</UseMaui>
		<SingleProject>true</SingleProject>
		<ImplicitUsings>enable</ImplicitUsings>
		<Nullable>enable</Nullable>

		<!-- Display name -->
		<ApplicationTitle>LlamaCppChat</ApplicationTitle>

		<!-- App Identifier -->
		<ApplicationId>com.companyname.llamacppchat</ApplicationId>

		<!-- Versions -->
		<ApplicationDisplayVersion>1.0</ApplicationDisplayVersion>
		<ApplicationVersion>1</ApplicationVersion>

		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'">11.0</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst'">13.1</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'">21.0</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</SupportedOSPlatformVersion>
		<TargetPlatformMinVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</TargetPlatformMinVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'tizen'">6.5</SupportedOSPlatformVersion>
	</PropertyGroup>

	<PropertyGroup>
	  <TargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows'))">$(TargetFrameworks);net8.0-windows10.0.19041.0</TargetFrameworks>
	  <PlatformTarget>AnyCPU</PlatformTarget>
	</PropertyGroup>

	<ItemGroup>
		<!-- App Icon -->
		<MauiIcon Include="Resources\AppIcon\appicon.svg" ForegroundFile="Resources\AppIcon\appiconfg.svg" Color="#512BD4" />

		<!-- Splash Screen -->
		<MauiSplashScreen Include="Resources\Splash\splash.svg" Color="#512BD4" BaseSize="128,128" />

		<!-- Images -->
		<MauiImage Include="Resources\Images\*" />
		<MauiImage Update="Resources\Images\dotnet_bot.png" Resize="True" BaseSize="300,185" />

		<!-- Custom Fonts -->
		<MauiFont Include="Resources\Fonts\*" />

		<!-- Raw Assets (also remove the "Resources\Raw" prefix) -->
		<MauiAsset Include="Resources\Raw\**" LogicalName="%(RecursiveDir)%(Filename)%(Extension)" />
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="LLamaSharp" Version="0.18.0" />
		<PackageReference Include="LLamaSharp.Backend.Cpu" Version="0.18.0" />
		<PackageReference Include="Microsoft.Maui.Controls" Version="8.0.93" />
		<PackageReference Include="Microsoft.Maui.Controls.Compatibility" Version="8.0.93" />
		<PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="8.0.1" />
	</ItemGroup>

	<PropertyGroup>
		<ErrorOnDuplicatePublishOutputFiles>false</ErrorOnDuplicatePublishOutputFiles>
		<RestorePackagesPath>bin\$(Configuration)\.nuget\packages</RestorePackagesPath>
	</PropertyGroup>
	
	<!-- Workaround LlamaSharp issue #382. -->
	<ItemGroup>
		<LlamaSharpBackendCpu Include="$(RestorePackagesPath)\llamasharp.backend.cpu\0.18.0\runtimes\**\*.*" />
		<!-- Commentate perché la mia GPU e la mia CPU non supportano questi backend -->
		<!--<LlamaSharpBackendCpu Include="$(RestorePackagesPath)\llamasharp.backend.cpu\0.18.0\runtimes\**\*.*" />
		<LlamaSharpBackendCuda11 Include="$(RestorePackagesPath)\llamasharp.backend.cuda11\0.18.0\runtimes\**\*.*" />
		<LlamaSharpBackendCuda12 Include="$(RestorePackagesPath)\llamasharp.backend.cuda12\0.18.0\runtimes\**\*.*" />
		<LlamaSharpBackendOpenCL Include="$(RestorePackagesPath)\llamasharp.backend.opencl\0.18.0\runtimes\**\*.*" />-->
	</ItemGroup>
	
	<ItemGroup>
		<!-- Escludi i file duplicati -->
		<None Remove="$(RestorePackagesPath)\llamasharp.backend.cpu\0.18.0\runtimes\win-x64\native\avx\ggml.dll" />
		<None Remove="$(RestorePackagesPath)\llamasharp.backend.cpu\0.18.0\runtimes\win-x64\native\avx2\ggml.dll" />
		<None Remove="$(RestorePackagesPath)\llamasharp.backend.cpu\0.18.0\runtimes\win-x64\native\avx512\ggml.dll" />
		<None Remove="$(RestorePackagesPath)\llamasharp.backend.cpu\0.18.0\runtimes\win-x64\native\avx\llama.dll" />
		<None Remove="$(RestorePackagesPath)\llamasharp.backend.cpu\0.18.0\runtimes\win-x64\native\avx2\llama.dll" />
		<None Remove="$(RestorePackagesPath)\llamasharp.backend.cpu\0.18.0\runtimes\win-x64\native\avx512\llama.dll" />
		<None Remove="$(RestorePackagesPath)\llamasharp.backend.cpu\0.18.0\runtimes\win-x64\native\avx\llava_shared.dll" />
		<None Remove="$(RestorePackagesPath)\llamasharp.backend.cpu\0.18.0\runtimes\win-x64\native\avx2\llava_shared.dll" />
		<None Remove="$(RestorePackagesPath)\llamasharp.backend.cpu\0.18.0\runtimes\win-x64\native\avx512\llava_shared.dll" />
	</ItemGroup>

	<Target Name="CopyRuntimesFolderOnBuild" AfterTargets="Build">
		<Delete Files="$(OutDir)ggml.dll" />
		<Delete Files="$(OutDir)llama.dll" />
		<Delete Files="$(OutDir)llava_shared.dll" />
		<Copy SourceFiles="@(LlamaSharpBackendCpu)" DestinationFolder="$(OutputPath)\runtimes\%(RecursiveDir)" />
		<!-- Commentate perché la mia GPU e la mia CPU non supportano questi backend -->
		<!--<Copy SourceFiles="@(LlamaSharpBackendCpu)" DestinationFolder="$(OutputPath)\runtimes\%(RecursiveDir)" />
		<Copy SourceFiles="@(LlamaSharpBackendCuda11)" DestinationFolder="$(OutputPath)\runtimes\%(RecursiveDir)" />
		<Copy SourceFiles="@(LlamaSharpBackendCuda12)" DestinationFolder="$(OutputPath)\runtimes\%(RecursiveDir)" />
		<Copy SourceFiles="@(LlamaSharpBackendOpenCL)" DestinationFolder="$(OutputPath)\runtimes\%(RecursiveDir)" />-->
	</Target>
	<Target Name="CopyRuntimesFolderOnPublish" AfterTargets="Publish">
		<Delete Files="$(PublishDir)ggml.dll" />
		<Delete Files="$(PublishDir)llama.dll" />
		<Delete Files="$(PublishDir)llava_shared.dll" />
		<Copy SourceFiles="@(LlamaSharpBackendCpu)" DestinationFolder="$(PublishDir)\runtimes\%(RecursiveDir)" />
		<!-- Commentate perché la mia GPU e la mia CPU non supportano questi backend -->
		<!--<Copy SourceFiles="@(LlamaSharpBackendCpu)" DestinationFolder="$(PublishDir)\runtimes\%(RecursiveDir)" />
		<Copy SourceFiles="@(LlamaSharpBackendCuda11)" DestinationFolder="$(PublishDir)\runtimes\%(RecursiveDir)" />
		<Copy SourceFiles="@(LlamaSharpBackendCuda12)" DestinationFolder="$(PublishDir)\runtimes\%(RecursiveDir)" />
		<Copy SourceFiles="@(LlamaSharpBackendOpenCL)" DestinationFolder="$(PublishDir)\runtimes\%(RecursiveDir)" />-->
	</Target>
	<!-- /Workaround -->

</Project>
